Ques1. Find the total revenue (price Ã— quantity) for each item, sorted from highest to lowest.
answer-db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
  },
  {
    $sort: { totalRevenue: -1 }
  }
])

Ques2. Calculate the total quantity sold per month in 2022.
answer-db.sales.aggregate([
  {
    $group: {
      _id: { 
        year: { $year: "$date" },
        month: { $month: "$date" } 
      },
      totalQuantity: { $sum: "$quantity" }
    }
  },
  {
    $project: {
      _id: 0,
      year: "$_id.year",
      month: "$_id.month",
      totalQuantity: 1
    }
  },
  {
    $sort: { year: 1, month: 1 }
  }
])

Ques3.Find all items where price is greater than 10 and size is not 'Short'.
answer-db.sales.find({
  price: { $gt: 10 },
  size: { $ne: "Short" }
})

Ques4. Get all Cappuccino sales with quantity between 10 and 20.
answer-db.sales.find({
  item: "Cappuccino",
  quantity: { $gte: 10, $lte: 20 }
})

Ques5. Query to find items where the item name starts with "A".
answer-db.sales.find({
  item: { $regex: /^A/, $options: "i" }
})


Ques6. Find all records that do not have the field size.
answer-db.sales.find({
  size: { $exists: false }
})


Ques7. Find all sales that are either "Grande" or "Tall" but not "Americanos".
answer-db.sales.find({
  $and: [
    { size: { $in: ["Grande", "Tall"] } },  
    { item: { $ne: "Americanos" } }         
  ]
})

Ques8.List all items sold in February 2022.
answer-db.sales.distinct("item", {
  date: {
    $gte: ISODate("2022-02-01T00:00:00Z"),
    $lt: ISODate("2022-03-01T00:00:00Z")
  }
})

Ques9. Find sales where the quantity is more than twice the price.
answer-db.sales.find({
  $where: function() {
    return this.quantity > (this.price * 2);
  }
})


Ques10. Find all sales where the price is greater than the average price of their respective size.
answer-db.sales.aggregate([
  {
    $group: {
      _id: "$size",
      avgPrice: { $avg: "$price" },
      docs: { $push: "$$ROOT" }
    }
  },
  { $unwind: "$docs" },
  {
    $match: {
      $expr: { $gt: ["$docs.price", "$avgPrice"] }
    }
  },
  {
    $replaceRoot: { newRoot: "$docs" }
  }
])

Ques11. Filter sales where the total revenue is even and exceeds 100.
answer-db.sales.find({
  $where: function() {
    const total = this.price * this.quantity;
    return total > 100 && total % 2 === 0;
  }
})


Ques11.Find Sales Where the Day of Week Matches Quantity's Last Digit 
[Filter sales where the day of the week (0=Sunday, 1=Monday, etc.) matches the last digit of quantity]
answer-db.sales.aggregate([
  {
    $match: {
      $expr: {
        $eq: [
          { $mod: [{ $subtract: [{ $dayOfWeek: "$date" }, 1] }, 10] },
          { $mod: ["$quantity", 10] }
        ]
      }
    }
  }
])


Ques12.Find Sales Where the Month is Prime and Quantity is Odd
[Filter sales where the month (1-12) is a prime number (2,3,5,7,11) AND quantity is odd]
answer-db.sales.find({
  $where: function() {
    const primeMonths = [2, 3, 5, 7, 11];
    const month = this.date.getMonth() + 1; // getMonth() returns 0-11
    return primeMonths.includes(month) && this.quantity % 2 === 1;
  }
});

Ques13.Find Sales with "Suspicious Quantities" (Divisible by 5 or 7)
[Filter sales where quantity is divisible by 5 or 7]
answer-db.sales.find({
  $expr: {
    $or: [
      { $eq: [{ $mod: ["$quantity", 5] }, 0] },
      { $eq: [{ $mod: ["$quantity", 7] }, 0] }
    ]
  }
});
